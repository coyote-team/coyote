h1= title "Resources"

= search_form_for record_filter.search, html: {class: "filters"}, url: resources_path, wrapper: :filters, enforce_utf8: false do |f|
  h2 Filter #{Resource.model_name.human(count: 2)}

  button.filters-close-button data-toggle-target="body" data-toggle="filters-toggled" type="button"
    = icon(:close)
    span.sr-only Close filters

  label.filter.field.field--accessory
    h3.sr-only Search by caption or description
    = icon :search, class: "field-accessory"
    = f.search_field :canonical_id_or_name_or_representations_text_cont_all, required: false, placeholder: "Search resources", role: "search"

  .filter
    h3.filter-title#priority_label Priority
    ul.boolean-list aria-labelled-by="priority_label"
      li.boolean-list-item: label
        = check_box_tag "q[priority_flag_eq]", true, filter_params.fetch(:priority_flag_eq, false).to_s == "true"
        span Urgent

  - if author_id = filter_params[:representations_author_id_eq] # HACK: with Ransack, we can't expose "representations_author_id_eq" AND scope[:represented] at the same time. Probably need to write a custom ransacker to make this work.
    h3.sr-only#representations_by_author_label With representations authored by user
    .filter: label aria-label="representations_by_author_label" With representations authored by user #{User.find_by(id: author_id).username}
  - else
    .filter
      h3.filter-title#status-label Description Status
      ul.boolean-list
        - filter_scopes(%i[unrepresented represented]).each do |name, scope|
          li.boolean-list-item: label
            = radio_button_tag "q[scope][]", scope, filter_params.fetch(:scope, []).include?(scope.to_s)
            span= name

    .filter
      h3.filter-title#status-label Assignment Status
      ul.boolean-list
        - filter_scopes(%i[unassigned assigned with_approved_representations]).each do |name, scope|
          li.boolean-list-item: label
            = check_box_tag "q[scope][]", scope, filter_params.fetch(:scope, []).include?(scope.to_s)
            span= name

    = f.input :assignments_user_id_eq, label: "Assigned to User", class: "input-medium form-control", required: false, collection: current_organization.users

  - if current_organization.resource_groups.many?
    h3.sr-only#resource_group_id_label Filter by group
    = f.input :resource_group_resources_resource_group_id_in, label: ResourceGroup.model_name.human, label_html: {aria: {label: "resource_group_id_label"}}, collection: current_organization.resource_groups, as: :select, required: false

  .filter
    = f.submit "Apply Filters", name: nil, class: "button"
    = f.submit "Clear", type: "reset", class: "button button--outline"

.toolbar
  button.button.button--round.filter-toggle data-toggle-target="body" data-toggle="filters-toggled" type="button"
    span
      ' Filter
      span.sr-only= Resource.model_name.human(count: 2).downcase
    = icon(:options)

  = applied_filters

  ruby:
    can_create = policy(Resource).new?
    can_import = can?(:create, Import)
  - if can_import || can_create
    = toolbar_item class: "field" do
      = link_to("Add Resource", new_resource_path, class: "button") if can_create
      - if can_import
        - if can_create
          // Show the import option as a dropdown beside "Add Resource"
          = dropdown(label: icon(:chevron_down), toggle: {class: "button button--narrow"}) do
            = dropdown_option link_to(icon(:cloud_upload, prefix: "Import Resources"), new_import_path)
        - else
          // Show the import option as a standalone button
          = new_link_to("Import Resources", new_import_path)

  = sort_form(record_filter.search, {id: "sort-resources", enforce_utf8: false}) do
    h3.sr-only Sort
    = sort_select do
      = sort_option(:name, :asc, "Name, A-Z")
      = sort_option(:name, :desc, "Name, Z-A")
      = sort_option(:created_at, :desc, "Date imported, recent")
      = sort_option(:created_at, :asc, "Date imported, oldest")
    button.button.button--round Sort

= simple_form_for :resource, url: update_many_resources_path, html: { id: "results" } do |form|
  h2.sr-only#results-title
    ' Results:
    - count = record_filter.records.total_count
    = number_with_delimiter count
    '
    = "resource".pluralize(count)

  = render "list", form: can_assign? ? form : nil, resources: record_filter.records
