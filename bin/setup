#!/usr/bin/env ruby

# This is the developer setup script. To install on a production server, see install.sh
# Based on https://github.com/mattbrictson/rails-template/blob/master/bin/setup

def setup!
  within_project_root do
    test "ruby -v" => ruby_version
    run  "gem install bundler --no-document --conservative"
    run  "bundle install"

    puts "Setting up initial default values for your development environment. You can just hit return for most of these, to use default values.\n"
    puts "First the general environmental settings for all environments:\n"
    run "bin/conf_creator.sh .env"

    puts "Now the settings for the development environment:\n"
    run "bin/conf_creator.sh .env.development"

    puts "Now the settings for the test environment:\n"
    run "bin/conf_creator.sh .env.test"

    check_for_mysql

    run("bin/rake db:drop db:create db:migrate db:test:prepare db:seed")
  end
end

def check_for_mysql
  # TODO should actually try to connect to the database using values in config/database.yml, maybe directly with the MySQL gem
  if `ps aux`.split(/\n/).grep(/mysql/).empty?
    warn "it doesn't look like MySQL is running, so database setup may fail. Try 'brew install mysql' if you are on macOS."
  end
end

def within_project_root
  Dir.chdir(File.expand_path("../",__dir__)) do
    yield
  end
end

def ruby_version
  return IO.read(".ruby-version").strip
end

def run(command)
  puts "run 'command'"

  with_clean_bundler_env do
    system(command) || abort("#{command} exited with non-zero status")
  end
end

def with_clean_bundler_env
  if defined?(Bundler)
    Bundler.with_clean_env { yield }
  else
    yield
  end
end

setup!
