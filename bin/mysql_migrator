#!/usr/bin/env ruby

# This is a quick one-off script to migrate stuff from Coyote's original MySQL DB into today's Postgres DB

require ::File.expand_path('../../config/environment', __FILE__)
require "csv"
require 'mysql2'
require "factory_bot_rails"
require 'pp'

Rails.logger.silence do

  FactoryBot.factories[:license].defined_traits.to_a.map do |trait|
    FactoryBot.create(:license,trait.name)
  end

  FactoryBot.factories[:endpoint].defined_traits.to_a.map do |trait|
    FactoryBot.create(:endpoint,trait.name)
  end

  Organization.create!(title: "MCA Chicago")

  class User
    protected

    def password_required?
      return false
    end
  end

  uri = URI.parse(ENV.fetch('JAWSDB_URL'))
  db = uri.path[1..-1]
  client = Mysql2::Client.new(host: uri.host, username: uri.user, database: db, password: uri.password)

  org = Organization.find(1)

  meta = client.query('SELECT * FROM meta').to_a
  org.meta.create!(meta.to_a)
  puts "Metum: #{Metum.count}"

  resource_groups = client.query(<<~SQL
  SELECT DISTINCT i.group_id AS id, g.title
  FROM images i
  INNER JOIN groups g
  ON i.group_id = g.id
  SQL
  ).to_a

  org.resource_groups.create!(resource_groups.to_a)
  puts "resource_group: #{ResourceGroup.count}"

  users = client.query('SELECT * FROM users').to_a

  users.each do |u|
    role = if u.delete('admin') == 1
             :admin
           else
             :editor
           end

    user = User.create!(u)
    Membership.create!(user: user, organization: org, role: role)
  end

  puts "user: #{User.count}"

  images = client.query('SELECT * FROM images').to_a
  resource_ids = {}

  CSV.open("duplicates.csv", "w+") do |csv|
    csv << ["Old Resource ID", "New Resource ID", "Representation ID", "Resource Path", "Resource URL", "Representation Path", "Representation URL"]

    Resource.without_auditing do
      puts "Importing #{images.count} images"
      images.each do |image|
        # Prepare the resource by massaging old columns to new
        image.delete('priority')

        path = image.delete('path')
        image['source_uri'] = "https://mcachicago.org#{path}"

        image.delete('website_id')
        image['resource_group_id'] = image.delete('group_id')

        image.delete('assignments_count')
        image.delete('descriptions_count')
        page_urls = image.delete('page_urls')
        image.delete('status_code')
        image['host_uris'] = JSON.parse(page_urls).join("\n") if page_urls.present?
        image['resource_type'] = 'still_image'
        image['identifier'] = image['id']

        image.delete('title') if image['title'].blank? # use DB default in this case

        # Look for a duplicate
        duplicate_resource = Resource.connection.select_one(
          %{SELECT id FROM resources WHERE canonical_id = '#{image['canonical_id']}'}
        )
        if duplicate_resource.present?
          puts "IMAGE: #{image['canonical_id']}"
          puts "  Duplicated!"
          puts "    Old ID: #{duplicate_resource['id']}"
          puts "    New ID: #{image['id']}"
          resource_ids[image['id']] = duplicate_resource['id']
        else
          org.resources.create!(image)
        end
      end
    end

    puts "Imported #{Resource.count} resources"

    statuses = {}
    client.query('SELECT * from statuses').each do |status|
      statuses[status["id"]] = status["title"].downcase.gsub(" ", "_")
    end

    license = License.find_by!(name: 'cc0-1.0')

    descriptions = client.query('SELECT * from descriptions').to_a
    puts "Importing #{descriptions.count} descriptions"

    endpoint = Endpoint.first

    representations = descriptions.map do |rep|
      rep['language'] = rep.delete('locale')
      status = rep.delete('status_id')
      status = statuses.fetch(status)
      rep['status'] = status
      old_resource_id = rep.delete('image_id')
      resource_id = resource_ids[old_resource_id]
      puts "#{rep['id']}: resource ID #{old_resource_id} (correlates to #{resource_id})"
      rep['resource_id'] = resource_id
      if resource_id != old_resource_id
        # We're moving a representation to its duplicate
        puts "Duplicate description #{rep.inspect}"
        resource_path = "/resources/#{resource_id}"
        representation_path = "/representations/#{rep['id']}"
        csv << [old_resource_id, resource_id, rep['id'], resource_path, "https://staging.coyote.pacs#{resource_path}", representation_path, "https://staging.coyote.pacs#{resource_path}"]
      end
      rep['author_id'] = rep.delete('user_id')
      rep.delete('license')
      rep['endpoint_id'] = endpoint.id
      rep['license_id'] = license.id
      rep
    end

    Representation.without_auditing { Representation.create!(representations) }
    puts "Imported #{Representation.count} representations"
  end

  assignments = client.query('SELECT * from assignments').to_a.map do |assignment|
    assignment["resource_id"] = resource_ids[assignment.delete("image_id")]
    assignment
  end
  Assignment.create!(assignments)

  audits = client.query("SELECT * from audits").to_a

  audits.each do |a|
    a['username'] = a['username'].presence || 'Unknown'
    a['auditable_type'] = 'Representation' if a['auditable_type'] == 'Description'
    a['audited_changes'] = YAML.parse(a['audited_changes']).to_ruby if a['audited_changes'] =~ /^---/
  end

  Audits = Class.new(ActiveRecord::Base)
  Audits.connection.execute %{TRUNCATE TABLE audits}
  Audits.create!(audits)

  # Reset Postgres sequences per https://stackoverflow.com/a/38575949/308448
  ActiveRecord::Base.connection.execute %{
  CREATE OR REPLACE FUNCTION "reset_sequence" (tablename text, columnname text, sequence_name text) RETURNS "pg_catalog"."void" AS
      $body$
        DECLARE
        BEGIN
        EXECUTE 'SELECT setval( ''' || sequence_name  || ''', ' || '(SELECT MAX(' || columnname || ') FROM ' || tablename || ')' || '+1)';
        END;

      $body$  LANGUAGE 'plpgsql';

      select table_name || '_' || column_name || '_seq', reset_sequence(table_name, column_name, table_name || '_' || column_name || '_seq') from information_schema.columns where column_default like 'nextval%';
  }

  pp resource_ids
  puts "ALL DONE"

end
